// ◮◮◮ GENERATED BY AURORA ◮◮◮
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ActionPlans {
  id           String     @id @default(uuid())
  prize        String
  comments     String
  title        String
  sellerId     String
  done         Boolean    @default(false)
  seller       Seller     @relation(fields: [sellerId], references: [id])
  supervisorId String
  supervisor   Supervisor @relation(fields: [supervisorId], references: [id])
  visitId      String?    @unique
  visit        Visit?     @relation(fields: [visitId], references: [id])
  moduleId     String?    @unique
  module       Module?    @relation(fields: [moduleId], references: [id])
  created_at   DateTime   @default(now())
}

model Supervisor {
  id         String        @id @default(uuid())
  image      String
  name       String
  email      String
  password   String
  job        String        @default("Supervisor")
  seller     Seller[]
  manager    Manager?      @relation(fields: [managerId], references: [id])
  managerId  String?
  created_at DateTime      @default(now())
  company    Company       @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId  String
  actionPlan ActionPlans[]
}

model Seller {
  id              String            @id @default(uuid())
  questionsGrades QuestionsGrades[]
  visit           Visit[]
  supervisor      Supervisor        @relation(fields: [supervisorId], references: [id])
  supervisorId    String
  image           String
  name            String
  email           String            @unique
  job             String            @default("Vendedor")
  stage           Stage             @default(Pendente)
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId       String
  moduleGrades    ModuleGrades[]
  created_at      DateTime          @default(now())
  actionPlan      ActionPlans[]
}

model Visit {
  id              String        @id @default(uuid())
  storeVisited    String
  dateVisited     String
  grade           Float         @default(0)
  comments        String        @default("")
  seller          Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId        String
  visitTemplate   VisitTemplate @relation(fields: [visitTemplateId], references: [id])
  visitTemplateId String
  created_at      DateTime      @default(now())
  actionPlan      ActionPlans?
}

model Module {
  id           String          @id @default(uuid())
  sellerGrades ModuleGrades[]
  name         String
  companies    ModuleCompany[]
  created_at   DateTime        @default(now())
  actionPlan   ActionPlans?
}

model Company {
  id            String          @id @default(uuid())
  visitTemplate VisitTemplate?
  seller        Seller[]
  manager       Manager[]
  director      Director[]
  modules       ModuleCompany[]
  image         String
  name          String
  stage         String          @default("Estágio inicial")
  supervisor    Supervisor[]
  created_at    DateTime        @default(now())
}

model Manager {
  id            String         @id @default(uuid())
  visitTemplate VisitTemplate?
  supervisor    Supervisor[]
  image         String
  name          String
  email         String
  password      String
  job           String         @default("Gerente")
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId     String
  director      Director?      @relation(fields: [directorId], references: [id])
  directorId    String?
  created_at    DateTime       @default(now())
}

model Director {
  id            String         @id @default(uuid())
  visitTemplate VisitTemplate?
  manager       Manager[]
  image         String
  name          String
  email         String
  password      String
  job           String         @default("Diretor")
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId     String
  created_at    DateTime       @default(now())
}

model ModuleCompany {
  id        String  @id @default(uuid())
  moduleId  String
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ModuleGrades {
  id                  String   @id @default(uuid())
  seller              Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId            String
  implementationScore Float
  knowledgeScore      Float
  media               Float
  supervisorComment   String
  module              Module   @relation(fields: [moduleId], references: [id])
  moduleId            String
  created_at          DateTime @default(now())
}

model VisitTemplate {
  id         String       @id @default(uuid())
  company    Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId  String?      @unique
  manager    Manager?     @relation(fields: [managerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  managerId  String?      @unique
  director   Director?    @relation(fields: [directorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directorId String?      @unique
  categories Categories[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  visit      Visit[]
}

model Categories {
  id              String        @id @default(uuid())
  visitTemplate   VisitTemplate @relation(fields: [visitTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  visitTemplateId String
  questions       Questions[]
  name            String
  number          Int
  comments        String
}

model Questions {
  id           String            @id @default(uuid())
  grade        QuestionsGrades[]
  question     String
  number       Int
  categories   Categories        @relation(fields: [categoriesId], references: [id])
  categoriesId String
}

model QuestionsGrades {
  id          String    @id @default(uuid())
  grade       Float
  question    Questions @relation(fields: [questionsId], references: [id])
  questionsId String
  seller      Seller    @relation(fields: [sellerId], references: [id])
  sellerId    String
  created_at  DateTime  @default(now())
}

enum Stage {
  Pendente
  Mentoria
  Visita
}
